// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_roles.sql

package userQuery

import (
	"context"
)

const addUserRole = `-- name: AddUserRole :exec
INSERT INTO 
user_roles(user_id, role_id)
values(?,?)
`

type AddUserRoleParams struct {
	UserID string `json:"user_id"`
	RoleID int64  `json:"role_id"`
}

func (q *Queries) AddUserRole(ctx context.Context, arg AddUserRoleParams) error {
	_, err := q.exec(ctx, q.addUserRoleStmt, addUserRole, arg.UserID, arg.RoleID)
	return err
}

const updateUserRole = `-- name: UpdateUserRole :one
UPDATE user_roles
SET role_id = ?
WHERE user_id = ?
RETURNING user_id, role_id
`

type UpdateUserRoleParams struct {
	RoleID int64  `json:"role_id"`
	UserID string `json:"user_id"`
}

func (q *Queries) UpdateUserRole(ctx context.Context, arg UpdateUserRoleParams) (UserRole, error) {
	row := q.queryRow(ctx, q.updateUserRoleStmt, updateUserRole, arg.RoleID, arg.UserID)
	var i UserRole
	err := row.Scan(&i.UserID, &i.RoleID)
	return i, err
}
