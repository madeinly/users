// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package userQuery

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addUserMetaStmt, err = db.PrepareContext(ctx, addUserMeta); err != nil {
		return nil, fmt.Errorf("error preparing query AddUserMeta: %w", err)
	}
	if q.cleanupExpiredSessionsStmt, err = db.PrepareContext(ctx, cleanupExpiredSessions); err != nil {
		return nil, fmt.Errorf("error preparing query CleanupExpiredSessions: %w", err)
	}
	if q.countUsersStmt, err = db.PrepareContext(ctx, countUsers); err != nil {
		return nil, fmt.Errorf("error preparing query CountUsers: %w", err)
	}
	if q.createSessionStmt, err = db.PrepareContext(ctx, createSession); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSession: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteMetasStmt, err = db.PrepareContext(ctx, deleteMetas); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteMetas: %w", err)
	}
	if q.deleteSessionStmt, err = db.PrepareContext(ctx, deleteSession); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSession: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.getSessionByTokenStmt, err = db.PrepareContext(ctx, getSessionByToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionByToken: %w", err)
	}
	if q.getSessionByUserIDStmt, err = db.PrepareContext(ctx, getSessionByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query GetSessionByUserID: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByUsernameStmt, err = db.PrepareContext(ctx, getUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByUsername: %w", err)
	}
	if q.getUsersStmt, err = db.PrepareContext(ctx, getUsers); err != nil {
		return nil, fmt.Errorf("error preparing query GetUsers: %w", err)
	}
	if q.updateSessionDataStmt, err = db.PrepareContext(ctx, updateSessionData); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionData: %w", err)
	}
	if q.updateSessionTokenStmt, err = db.PrepareContext(ctx, updateSessionToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSessionToken: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.updateUserEmailStmt, err = db.PrepareContext(ctx, updateUserEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserEmail: %w", err)
	}
	if q.updateUserLastLoginStmt, err = db.PrepareContext(ctx, updateUserLastLogin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserLastLogin: %w", err)
	}
	if q.updateUserMetaStmt, err = db.PrepareContext(ctx, updateUserMeta); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserMeta: %w", err)
	}
	if q.updateUserPasswordStmt, err = db.PrepareContext(ctx, updateUserPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserPassword: %w", err)
	}
	if q.updateUserRoleStmt, err = db.PrepareContext(ctx, updateUserRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserRole: %w", err)
	}
	if q.updateUserStatusStmt, err = db.PrepareContext(ctx, updateUserStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserStatus: %w", err)
	}
	if q.updateUserUsernameStmt, err = db.PrepareContext(ctx, updateUserUsername); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserUsername: %w", err)
	}
	if q.userExistsStmt, err = db.PrepareContext(ctx, userExists); err != nil {
		return nil, fmt.Errorf("error preparing query UserExists: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addUserMetaStmt != nil {
		if cerr := q.addUserMetaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addUserMetaStmt: %w", cerr)
		}
	}
	if q.cleanupExpiredSessionsStmt != nil {
		if cerr := q.cleanupExpiredSessionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing cleanupExpiredSessionsStmt: %w", cerr)
		}
	}
	if q.countUsersStmt != nil {
		if cerr := q.countUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countUsersStmt: %w", cerr)
		}
	}
	if q.createSessionStmt != nil {
		if cerr := q.createSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSessionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteMetasStmt != nil {
		if cerr := q.deleteMetasStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteMetasStmt: %w", cerr)
		}
	}
	if q.deleteSessionStmt != nil {
		if cerr := q.deleteSessionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSessionStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.getSessionByTokenStmt != nil {
		if cerr := q.getSessionByTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionByTokenStmt: %w", cerr)
		}
	}
	if q.getSessionByUserIDStmt != nil {
		if cerr := q.getSessionByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSessionByUserIDStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByUsernameStmt != nil {
		if cerr := q.getUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByUsernameStmt: %w", cerr)
		}
	}
	if q.getUsersStmt != nil {
		if cerr := q.getUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUsersStmt: %w", cerr)
		}
	}
	if q.updateSessionDataStmt != nil {
		if cerr := q.updateSessionDataStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionDataStmt: %w", cerr)
		}
	}
	if q.updateSessionTokenStmt != nil {
		if cerr := q.updateSessionTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSessionTokenStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.updateUserEmailStmt != nil {
		if cerr := q.updateUserEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserEmailStmt: %w", cerr)
		}
	}
	if q.updateUserLastLoginStmt != nil {
		if cerr := q.updateUserLastLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserLastLoginStmt: %w", cerr)
		}
	}
	if q.updateUserMetaStmt != nil {
		if cerr := q.updateUserMetaStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserMetaStmt: %w", cerr)
		}
	}
	if q.updateUserPasswordStmt != nil {
		if cerr := q.updateUserPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserPasswordStmt: %w", cerr)
		}
	}
	if q.updateUserRoleStmt != nil {
		if cerr := q.updateUserRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserRoleStmt: %w", cerr)
		}
	}
	if q.updateUserStatusStmt != nil {
		if cerr := q.updateUserStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStatusStmt: %w", cerr)
		}
	}
	if q.updateUserUsernameStmt != nil {
		if cerr := q.updateUserUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserUsernameStmt: %w", cerr)
		}
	}
	if q.userExistsStmt != nil {
		if cerr := q.userExistsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userExistsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                         DBTX
	tx                         *sql.Tx
	addUserMetaStmt            *sql.Stmt
	cleanupExpiredSessionsStmt *sql.Stmt
	countUsersStmt             *sql.Stmt
	createSessionStmt          *sql.Stmt
	createUserStmt             *sql.Stmt
	deleteMetasStmt            *sql.Stmt
	deleteSessionStmt          *sql.Stmt
	deleteUserStmt             *sql.Stmt
	getSessionByTokenStmt      *sql.Stmt
	getSessionByUserIDStmt     *sql.Stmt
	getUserStmt                *sql.Stmt
	getUserByEmailStmt         *sql.Stmt
	getUserByIDStmt            *sql.Stmt
	getUserByUsernameStmt      *sql.Stmt
	getUsersStmt               *sql.Stmt
	updateSessionDataStmt      *sql.Stmt
	updateSessionTokenStmt     *sql.Stmt
	updateUserStmt             *sql.Stmt
	updateUserEmailStmt        *sql.Stmt
	updateUserLastLoginStmt    *sql.Stmt
	updateUserMetaStmt         *sql.Stmt
	updateUserPasswordStmt     *sql.Stmt
	updateUserRoleStmt         *sql.Stmt
	updateUserStatusStmt       *sql.Stmt
	updateUserUsernameStmt     *sql.Stmt
	userExistsStmt             *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                         tx,
		tx:                         tx,
		addUserMetaStmt:            q.addUserMetaStmt,
		cleanupExpiredSessionsStmt: q.cleanupExpiredSessionsStmt,
		countUsersStmt:             q.countUsersStmt,
		createSessionStmt:          q.createSessionStmt,
		createUserStmt:             q.createUserStmt,
		deleteMetasStmt:            q.deleteMetasStmt,
		deleteSessionStmt:          q.deleteSessionStmt,
		deleteUserStmt:             q.deleteUserStmt,
		getSessionByTokenStmt:      q.getSessionByTokenStmt,
		getSessionByUserIDStmt:     q.getSessionByUserIDStmt,
		getUserStmt:                q.getUserStmt,
		getUserByEmailStmt:         q.getUserByEmailStmt,
		getUserByIDStmt:            q.getUserByIDStmt,
		getUserByUsernameStmt:      q.getUserByUsernameStmt,
		getUsersStmt:               q.getUsersStmt,
		updateSessionDataStmt:      q.updateSessionDataStmt,
		updateSessionTokenStmt:     q.updateSessionTokenStmt,
		updateUserStmt:             q.updateUserStmt,
		updateUserEmailStmt:        q.updateUserEmailStmt,
		updateUserLastLoginStmt:    q.updateUserLastLoginStmt,
		updateUserMetaStmt:         q.updateUserMetaStmt,
		updateUserPasswordStmt:     q.updateUserPasswordStmt,
		updateUserRoleStmt:         q.updateUserRoleStmt,
		updateUserStatusStmt:       q.updateUserStatusStmt,
		updateUserUsernameStmt:     q.updateUserUsernameStmt,
		userExistsStmt:             q.userExistsStmt,
	}
}
