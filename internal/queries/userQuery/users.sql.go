// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package userQuery

import (
	"context"
	"database/sql"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.queryRow(ctx, q.countUsersStmt, countUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    id,
    username,
    email,
    password
) VALUES (
    ?,
    ?,
    ?,
    ?
) RETURNING id, username, email, password, password_updated_at, created_at, updated_at
`

type CreateUserParams struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PasswordUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteUserStmt, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    u.id,
    u.email,
    u.username,
    u.password,
    ur.role_id,
    um.meta_value AS user_status
FROM
    users u
INNER JOIN
    user_roles ur ON u.id = ur.user_id
INNER JOIN
    users_meta um ON u.id = um.user_id AND um.meta_key = 'user_status'
WHERE
    u.id = ?
`

type GetUserRow struct {
	ID         string `json:"id"`
	Email      string `json:"email"`
	Username   string `json:"username"`
	Password   string `json:"password"`
	RoleID     int64  `json:"role_id"`
	UserStatus string `json:"user_status"`
}

func (q *Queries) GetUser(ctx context.Context, id string) (GetUserRow, error) {
	row := q.queryRow(ctx, q.getUserStmt, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.Password,
		&i.RoleID,
		&i.UserStatus,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password, password_updated_at, created_at, updated_at FROM users 
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PasswordUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password, password_updated_at, created_at, updated_at FROM users 
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PasswordUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password, password_updated_at, created_at, updated_at FROM users 
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PasswordUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT
    u.id,
    u.username,
    u.email,
    u.password,
    ur.role_id,
    um.meta_value AS status_name,
    u.created_at
FROM
    users u
INNER JOIN user_roles ur ON u.id = ur.user_id
LEFT JOIN users_meta um ON u.id = um.user_id AND um.meta_key = 'user_status'
WHERE
    (?1 = '' OR u.username LIKE '%' || ?1 || '%') AND
    (?2 = 0 OR ur.role_id = ?2) AND 
    (?3 = '' OR COALESCE(um.meta_value, 'active') = ?3)
LIMIT ?5 OFFSET ?4
`

type GetUsersParams struct {
	Username interface{} `json:"username"`
	RoleID   interface{} `json:"role_id"`
	Status   interface{} `json:"status"`
	Offset   int64       `json:"offset"`
	Limit    int64       `json:"limit"`
}

type GetUsersRow struct {
	ID         string         `json:"id"`
	Username   string         `json:"username"`
	Email      string         `json:"email"`
	Password   string         `json:"password"`
	RoleID     int64          `json:"role_id"`
	StatusName sql.NullString `json:"status_name"`
	CreatedAt  string         `json:"created_at"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.query(ctx, q.getUsersStmt, getUsers,
		arg.Username,
		arg.RoleID,
		arg.Status,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersRow
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.RoleID,
			&i.StatusName,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = ?,
    email = ?,
    password = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, username, email, password, password_updated_at, created_at, updated_at
`

type UpdateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.queryRow(ctx, q.updateUserStmt, updateUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.PasswordUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET
    last_login = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.updateUserLastLoginStmt, updateUserLastLogin, id)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET
    password = ?,
    password_updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	ID       string `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.exec(ctx, q.updateUserPasswordStmt, updateUserPassword, arg.Password, arg.ID)
	return err
}

const userExists = `-- name: UserExists :one
SELECT CAST(EXISTS (
    SELECT 1 FROM users 
    WHERE id = ?
) AS BOOLEAN) AS user_exists
`

func (q *Queries) UserExists(ctx context.Context, id string) (bool, error) {
	row := q.queryRow(ctx, q.userExistsStmt, userExists, id)
	var user_exists bool
	err := row.Scan(&user_exists)
	return user_exists, err
}
